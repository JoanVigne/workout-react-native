import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Modal,
  ScrollView,
  Alert,
} from "react-native";
import { Ionicons } from '@expo/vector-icons';
import CloseButton from "./ui/CloseButton";
import ActionButton from "./ui/ActionButton";
import { useUser } from "../context/UserContext";

const exerciseTypes = [
  { value: 'muscu', label: 'Muscu' },
  { value: 'cardio', label: 'Cardio' },
  { value: 'hiit', label: 'HIIT' },
  { value: 'etirement', label: 'Étirement' },
  { value: 'poids', label: 'Poids libre' },
];

export default function ModifyWorkoutForm({ visible, workout, onModified, onClose }) {
  const { updateWorkout } = useUser();
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [exercises, setExercises] = useState([]);
  const [newExercise, setNewExercise] = useState("");
  const [exerciseType, setExerciseType] = useState("muscu");

  // Initialiser les champs avec les données du workout
  useEffect(() => {
    if (workout) {
      setName(workout.name || "");
      setDescription(workout.description || "");
      setExercises(workout.exercises || []);
    }
  }, [workout]);

  const handleAddExercise = () => {
    if (!newExercise.trim()) return;

    const exerciseId = `${newExercise.trim().toLowerCase().replace(/\s+/g, "_")}_${Date.now()}`;
    
    setExercises((prev) => [
      ...prev,
      {
        id: exerciseId,
        name: newExercise.trim(),
        type: exerciseType
      }
    ]);
    
    setNewExercise("");
  };

  const handleRemoveExercise = (id) => {
    setExercises((prev) => prev.filter((ex) => ex.id !== id));
  };

  const handleModifyWorkout = async () => {
    if (!name.trim()) {
      Alert.alert("Erreur", "Veuillez entrer un nom pour l'entraînement");
      return;
    }

    if (exercises.length === 0) {
      Alert.alert("Erreur", "Veuillez ajouter au moins un exercice");
      return;
    }

    try {
      await updateWorkout(workout.id, {
        name: name.trim(),
        description: description.trim(),
        exercises: exercises,
        lastModified: new Date().toISOString(),
      });

      onModified();
      onClose();
    } catch (error) {
      console.error("Erreur lors de la modification:", error);
      Alert.alert("Erreur", "Impossible de modifier l'entraînement");
    }
  };

  const renderExerciseTypeLabel = () => {
    const selectedType = exerciseTypes.find(type => type.value === exerciseType);
    return selectedType ? selectedType.label : 'Type';
  };

  return (
    <Modal
      visible={visible}
      animationType="fade"
      transparent={true}
      onRequestClose={onClose}
    >
      <TouchableOpacity
        style={styles.modalOverlay}
        activeOpacity={1}
        onPress={onClose}
      >
        <TouchableOpacity
          style={styles.modalContainer}
          activeOpacity={1}
          onPress={(e) => e.stopPropagation()}
        >
          <CloseButton onPress={onClose} />
          
          <ScrollView style={styles.scrollContent}>
            <Text style={styles.title}>Modifier l'entraînement</Text>
            
            <Text style={styles.label}>Nom de l'entraînement</Text>
            <TextInput
              style={styles.input}
              placeholder="Nom de l'entraînement"
              value={name}
              onChangeText={setName}
            />
            
            <Text style={styles.label}>Description (optionnelle)</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="Description"
              value={description}
              onChangeText={setDescription}
              multiline
              numberOfLines={4}
            />
            
            <Text style={styles.label}>Exercices</Text>
            {exercises.length === 0 ? (
              <Text style={styles.emptyMessage}>Aucun exercice ajouté</Text>
            ) : (
              exercises.map((exercise) => (
                <View key={exercise.id} style={styles.exerciseItem}>
                  <Text style={styles.exerciseText}>{exercise.name}</Text>
                  <TouchableOpacity
                    style={styles.removeButton}
                    onPress={() => handleRemoveExercise(exercise.id)}
                  >
                    <Text style={styles.removeButtonText}>×</Text>
                  </TouchableOpacity>
                </View>
              ))
            )}
            
            <View style={styles.addExerciseContainer}>
              <View style={styles.exerciseRow}>
                <TouchableOpacity 
                  style={styles.typeButton}
                  onPress={() => {
                    const nextIndex = exerciseTypes.findIndex(t => t.value === exerciseType) + 1;
                    setExerciseType(exerciseTypes[nextIndex % exerciseTypes.length].value);
                  }}
                >
                  <View style={styles.typeButtonContent}>
                    <Text>{renderExerciseTypeLabel()}</Text>
                    <Ionicons name="chevron-down" size={16} color="#555" style={{marginLeft: 4}} />
                  </View>
                </TouchableOpacity>
                
                <TextInput
                  style={[styles.input, styles.exerciseInput]}
                  placeholder="Nouvel exercice"
                  value={newExercise}
                  onChangeText={setNewExercise}
                />
                
                <TouchableOpacity
                  style={styles.addButton}
                  onPress={handleAddExercise}
                >
                  <Ionicons name="add" size={24} color="#28a745" />
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
          
          <View style={styles.footer}>
            <ActionButton
              title="Enregistrer"
              onPress={handleModifyWorkout}
              variant="primary"
            />
          </View>
        </TouchableOpacity>
      </TouchableOpacity>
    </Modal>
  );
}

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContainer: {
    width: "90%",
    maxHeight: "85%",
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 20,
    paddingTop: 40,
    shadowColor: "#000",
    shadowOpacity: 0.2,
    shadowRadius: 10,
    elevation: 5,
  },
  scrollContent: {
    flex: 1,
    marginBottom: 16,
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 16,
    color: "#333",
  },
  label: {
    fontWeight: "bold",
    marginBottom: 6,
    marginTop: 12,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    backgroundColor: "#fafafa",
    fontSize: 16,
  },
  textArea: {
    height: 100,
    textAlignVertical: "top",
  },
  emptyMessage: {
    fontStyle: "italic",
    color: "#999",
    textAlign: "center",
    marginVertical: 20,
  },
  exerciseItem: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 12,
    paddingHorizontal: 8,
    borderRadius: 8,
    backgroundColor: "#f8f9fa",
    marginBottom: 8,
  },
  exerciseText: {
    flex: 1,
    fontSize: 16,
    color: "#333",
  },
  removeButton: {
    padding: 4,
    marginLeft: 8,
  },
  removeButtonText: {
    fontSize: 24,
    color: "#ff4444",
    fontWeight: "bold",
  },
  addExerciseContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 16,
  },
  exerciseInput: {
    flex: 1,
    marginBottom: 0,
    height: 45,
  },
  exerciseRow: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  typeButton: {
    marginRight: 10,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    padding: 8,
  },
  typeButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  addButton: {
    marginLeft: 10,
    height: 45,
    width: 45,
    justifyContent: 'center',
    alignItems: 'center',
  },
  footer: {
    marginTop: 16,
  },
});
